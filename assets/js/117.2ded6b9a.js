(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{646:function(t,r,a){"use strict";a.r(r);var s=a(4),e=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"v8-引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-引擎"}},[t._v("#")]),t._v(" V8 引擎")]),t._v(" "),a("p",[t._v("在 V8 引擎中垃圾回收主要分为新生代和老生代两部分")]),t._v(" "),a("h2",{attrs:{id:"新生代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生代"}},[t._v("#")]),t._v(" 新生代")]),t._v(" "),a("p",[t._v("大部分对象一开始都会被分配在这里，主要存放存活时间较短的对象\n在新生代中主要采用复制算法和标记整理算法")]),t._v(" "),a("blockquote",[a("p",[t._v("新生代的内存一般都比较小 64 位系统 32M , 32 位系统中 16M")])]),t._v(" "),a("p",[t._v("新生代内存区分为两个等大的空间 From 和 to， 一开始对象会被分配在 From 空间中，当执行垃圾回收时将活动对象复制一份到 to 空间中；然后将 From 空间进行释放，最后将 From 空间与 to 空间角色互换")]),t._v(" "),a("h2",{attrs:{id:"老生代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老生代"}},[t._v("#")]),t._v(" 老生代")]),t._v(" "),a("p",[t._v("对象在新生代中如果经历多次复制后依然存活，或者 \bto 空间内存占比超过 25% 时会从新生代移动到老生代中\n老生代指的是全局对象活动时间长，可使用的内存空间较大")]),t._v(" "),a("blockquote",[a("p",[t._v("64 位系统 1.4G， 32 位系统 700M")])]),t._v(" "),a("p",[t._v("老生代中主要采用标记清除算法，因为 js 是单线的，在执行垃圾回收时会阻碍同步任务的执行。所以 v8 中垃圾回收是间歇式的，先标记一部分对象，然后暂停，再继续执行同步任务，直至标记完所有对象")])])}),[],!1,null,null,null);r.default=e.exports}}]);