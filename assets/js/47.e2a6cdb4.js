(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{584:function(t,e,s){"use strict";s.r(e);var l=s(4),a=Object(l.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"requestidlecallback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestidlecallback"}},[this._v("#")]),this._v(" RequestIdleCallback")]),this._v(" "),e("p",[this._v("window.requestIdleCallback() 方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间 timeout，则有可能为了在超时前执行函数而打乱执行顺序。")]),this._v(" "),e("blockquote",[e("p",[this._v("dom 操作和 promise 回调不适合放到 requestIdleCallback 中 如果需要操作 dom 建议使用 requestAnimationFrame")])])])}),[],!1,null,null,null);e.default=a.exports}}]);